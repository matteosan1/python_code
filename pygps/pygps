#!/usr/bin/env python

import sys
from PyQt4 import Qt
import PyQt4.Qwt5 as Qwt
from PyQt4.Qwt5.anynumpy import *

import xml.sax
import gpshandler

import gpsgui

class CartesianAxis(Qwt.QwtPlotItem):
    def __init__(self, masterAxis, slaveAxis):
        Qwt.QwtPlotItem.__init__(self)
        self.__axis = masterAxis
        if masterAxis in (Qwt.QwtPlot.yLeft, Qwt.QwtPlot.yRight):
            self.setAxis(slaveAxis, masterAxis)
        else:
            self.setAxis(masterAxis, slaveAxis)
        self.scaleDraw = Qwt.QwtScaleDraw()
        self.scaleDraw.setAlignment((Qwt.QwtScaleDraw.LeftScale,
                                     Qwt.QwtScaleDraw.RightScale,
                                     Qwt.QwtScaleDraw.BottomScale,
                                     Qwt.QwtScaleDraw.TopScale)[masterAxis])

    def draw(self, painter, xMap, yMap, rect):
        if self.__axis in (Qwt.QwtPlot.yLeft, Qwt.QwtPlot.yRight):
            self.scaleDraw.move(round(xMap.xTransform(0.0)), yMap.p2())
            self.scaleDraw.setLength(yMap.p1()-yMap.p2())
        elif self.__axis in (Qwt.QwtPlot.xBottom, Qwt.QwtPlot.xTop):
            self.scaleDraw.move(xMap.p1(), round(yMap.xTransform(0.0)))
            self.scaleDraw.setLength(xMap.p2()-xMap.p1())
        self.scaleDraw.setScaleDiv(self.plot().axisScaleDiv(self.__axis))
        self.scaleDraw.draw(painter, self.plot().palette())

class CartesianPlot(Qwt.QwtPlot):
    def __init__(self, *args):
        Qwt.QwtPlot.__init__(self, *args)
        #self.setTitle(str(name))
        # create a plot with a white canvas
        self.setCanvasBackground(Qt.Qt.white)
        # set plot layout
        self.plotLayout().setMargin(0)
        self.plotLayout().setCanvasMargin(0)
        self.plotLayout().setAlignCanvasToScales(True)
        # attach a grid
        grid = Qwt.QwtPlotGrid()
        grid.attach(self)
        grid.setPen(Qt.QPen(Qt.Qt.black, 0, Qt.Qt.DotLine))
        # attach a y-axis
        yaxis = CartesianAxis(Qwt.QwtPlot.yLeft, Qwt.QwtPlot.xBottom)
        yaxis.attach(self)
        self.enableAxis(Qwt.QwtPlot.yLeft, True)
        # attach a x-axis
        xaxis = CartesianAxis(Qwt.QwtPlot.xBottom, Qwt.QwtPlot.yLeft)
        xaxis.attach(self)
        self.enableAxis(Qwt.QwtPlot.xBottom, True)

    def setData(self, x, y, name, color):
        # attach a curve
        curve = Qwt.QwtPlotCurve(str(name))
        curve.attach(self)
        curve.setPen(Qt.QPen(Qt.QColor(color), 2))
        curve.setData(x, y)
        self.replot()

class Window(Qt.QMainWindow):
    def __init__(self):
        Qt.QMainWindow.__init__(self)
        self.ui = gpsgui.Ui_PyGPS()
        self.ui.setupUi(self)
        self.track = 0
        self.ui.label.setText("Distanza \t\t: 0 Km")
        self.ui.label_2.setText("Altezza Max.\t: 0 m")
        self.ui.label_3.setText("Velocita` Max.\t: 0 Km/h")
        self.percorso = CartesianPlot(self.ui.frame)
        self.alt = CartesianPlot(self.ui.frame_3)
        self.speed = CartesianPlot(self.ui.frame_4)

        Qt.QObject.connect(self.ui.actionOpen, Qt.SIGNAL('triggered()'), self.openFile)
    
    def openFile(self):
        fileName = Qt.QFileDialog.getOpenFileName(self, "Open Track", 
                                                "/home/sani/gps/tracks", 
                                                "GPX Files (*.gpx)")
        if (fileName != ""):
            parser = xml.sax.make_parser()
            handler = gpshandler.GpsHandler()
            parser.setContentHandler(handler)
            parser.parse(str(fileName))
            tracks = handler.tracks
            items = [str(i) for i in xrange(len(tracks))]
            items.append("All")
            scelta = Qt.QInputDialog.getItem(self, "Tracks", "Puppa", items, 0, False)
            if (scelta[0] == "All"):
                self.track = handler.allTracks()
            else:
                self.track = tracks[int(scelta[0])]
            self.ui.label.setText("Distanza \t\t: %.1f Km"%((prova.track.distance())))
            self.ui.label_2.setText("Altezza Max.\t: %d m"%(prova.track.highestHeight()))
            self.ui.label_3.setText("Velocita` Max.\t: %.1f Km/h"%(prova.track.highestSpeed()))
            self.percorso.clear()
            self.alt.clear()
            self.speed.clear()
            self.percorso.resize(self.ui.frame.frameRect().width(), self.ui.frame.frameRect().height())
            self.percorso.setData(self.track.longitudes(), self.track.latitudes(), "Profilo Altimetrico", Qt.Qt.green)
            self.percorso.show()
            
            self.alt.resize(self.ui.frame_3.frameRect().width()*.9, self.ui.frame_3.frameRect().height()*.9)
            self.alt.setData(arange(len(self.track.points)), self.track.elevations(), "Profilo Altimetrico", Qt.Qt.blue)
            self.alt.show()
            
            self.speed.resize(self.ui.frame_4.frameRect().width(), self.ui.frame_4.frameRect().height())
            self.speed.setData(arange(len(self.track.points)), self.track.speeds(), "Velocita`", Qt.Qt.red)
            self.speed.show()


if __name__ == '__main__':
    app = Qt.QApplication(sys.argv)
    
    prova = Window()
    prova.show()
    
    sys.exit(app.exec_())

